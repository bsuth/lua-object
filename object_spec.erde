local Object = require('object')

describe('getters', () -> {
  local TestObject = Object({
    class_property = 1,
    publish = 2,
    instance_default = 3,
    _get_x = () -> 4,
  })

  TestObject.instance_default *= -1

  spec('has Object properties', () -> {
    assert.are.equal('function', type(TestObject.rawget))
    assert.are.equal('function', type(TestObject.get))
    assert.are.equal('function', type(TestObject.rawset))
    assert.are.equal('function', type(TestObject.set))
  })

  spec('has class properties', () -> {
    assert.are.equal(1, TestObject.class_property)
  })

  spec('prioritizes class over Object properties', () -> {
    assert.are.equal(2, TestObject.publish)
  })

  spec('prioritizes instance over class properties', () -> {
    assert.are.equal(-3, TestObject.instance_default)
  })

  spec('has custom getter', () -> {
    assert.are.equal(4, TestObject.x)
  })
})

describe('setters', () -> {
  local TestObject = Object({
    class_property = 1,
    _set_y = newY => self:rawset('y', newY + 1),
  })

  spec('stores properties in proxy', () -> {
    TestObject.x = 1
    assert.are.equal(1, TestObject._proxy.x)
  })

  spec('does not override class properties', () -> {
    TestObject.class_property *= -1
    assert.are.equal(-1, TestObject.class_property)
    assert.are.equal(1, TestObject._class.class_property)
  })

  spec('has custom setter', () -> {
    TestObject.y = 1
    assert.are.equal(2, TestObject.y)
  })
})

describe('pubsub', () -> {
  local TestObject = Object({
    class_property = 1,
    publish = 2,
    instance_default = 3,
    _get_x = () -> 4,
  })
})
