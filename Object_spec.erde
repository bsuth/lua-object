local Object = require('Object')

describe('creation', () -> {
  spec('can construct', () -> {
    assert.has_no.errors(() -> {
      Object()
      Object({})
      Object({ _get_x = () -> 1 })
    })
  })

  spec('can init', () -> {
    local canInit = false
    local initClassProperty = false

    local TestObject = Object({
      classProperty = 1,
      _init = () => {
        canInit = true
        initClassProperty = self.classProperty
        self.proxyProperty = 2
      }
    })

    assert.are.equal(true, canInit)
    assert.are.equal(TestObject._class.classProperty, initClassProperty)
    assert.are.equal(2, TestObject._proxy.proxyProperty)
  })
})

describe('getters', () -> {
  spec('has Object properties', () -> {
    local TestObject = Object()
    assert.are.equal('function', type(TestObject.rawget))
    assert.are.equal('function', type(TestObject.get))
    assert.are.equal('function', type(TestObject.rawset))
    assert.are.equal('function', type(TestObject.set))
  })

  spec('has class properties', () -> {
    local TestObject = Object({ classProperty = 1 })
    assert.are.equal(1, TestObject.classProperty)
  })

  spec('prioritizes class over Object properties', () -> {
    local TestObject = Object({ publish = 2 })
    assert.are.equal(2, TestObject.publish)
  })

  spec('prioritizes instance over class properties', () -> {
    local TestObject = Object({ instanceDefault = 3 })
    TestObject.instanceDefault *= -1
    assert.are.equal(-3, TestObject.instanceDefault)
  })

  spec('has custom getter', () -> {
    local TestObject = Object({ _get_x = () -> 4 })
    assert.are.equal(4, TestObject.x)
  })
})

describe('setters', () -> {
  spec('stores properties in proxy', () -> {
    local TestObject = Object()
    TestObject.x = 1
    assert.are.equal(1, TestObject._proxy.x)
  })

  spec('does not override class properties', () -> {
    local TestObject = Object({ classProperty = 1 })
    TestObject.classProperty *= -1
    assert.are.equal(-1, TestObject.classProperty)
    assert.are.equal(1, TestObject._class.classProperty)
  })

  spec('has custom setter', () -> {
    local TestObject = Object({ _set_y = newY => self:rawset('y', newY + 1) })
    TestObject.y = 1
    assert.are.equal(2, TestObject.y)
  })

  spec('can prevent rawset publish', () -> {
    local publishedChangeEvent = false
    local TestObject = Object({ _on_change_x = () => { publishedChangeEvent = true }})
    TestObject:rawset('x', 1, true)
    assert.are.equal(false, publishedChangeEvent)
  })
})

describe('pubsub', () -> {
  spec('has change events', () -> {
    local publishedOverrideChangeEvent = false
    local publishedNewKeyChangeEvent = false
    local publishedExistingKeyChangeEvent = false

    local TestObject = Object({ classKey = 0 })

    TestObject:subscribe('change_classKey', () -> {
      publishedOverrideChangeEvent = true
    })

    TestObject:subscribe('change_x', () -> {
      if !publishedNewKeyChangeEvent {
        publishedNewKeyChangeEvent = true
      } else {
        publishedExistingKeyChangeEvent = true
      }
    })

    TestObject.classKey = 1
    TestObject.x = 1
    TestObject.x = 2

    assert.are.equal(true, publishedOverrideChangeEvent)
    assert.are.equal(true, publishedNewKeyChangeEvent)
    assert.are.equal(true, publishedExistingKeyChangeEvent)
  })

  spec('has custom events', () -> {
    local publishedCustomEvent = false
    local TestObject = Object()

    TestObject:subscribe('myevent', () -> {
      publishedCustomEvent = true
    })

    assert.are.equal(false, publishedCustomEvent)
    TestObject:publish('myevent')
    assert.are.equal(true, publishedCustomEvent)
  })

  spec('can pass custom event args', () -> {
    local eventArg1, eventArg2 = 0, 0
    local TestObject = Object()

    TestObject:subscribe('myevent', (newEventArg1, newEventArg2) -> {
      eventArg1, eventArg2 = newEventArg1, newEventArg2
    })

    assert.are.equal(0, eventArg1)
    assert.are.equal(0, eventArg2)
    TestObject:publish('myevent', 1, 2)
    assert.are.equal(1, eventArg1)
    assert.are.equal(2, eventArg2)
  })

  spec('has native handlers', () -> {
    local publishedNativeHandler = false

    local TestObject = Object({
      _on_myevent = () => { publishedNativeHandler = true },
    })

    assert.are.equal(false, publishedNativeHandler)
    TestObject:publish('myevent', 1, 2)
    assert.are.equal(true, publishedNativeHandler)
  })

  spec('can pass native handler args', () -> {
    local eventArg1, eventArg2 = 0, 0
    local TestObject = Object()

    local TestObject = Object({
      _on_myevent = (newEventArg1, newEventArg2) => {
        eventArg1, eventArg2 = newEventArg1, newEventArg2
      },
    })

    assert.are.equal(0, eventArg1)
    assert.are.equal(0, eventArg2)
    TestObject:publish('myevent', 1, 2)
    assert.are.equal(1, eventArg1)
    assert.are.equal(2, eventArg2)
  })
})
