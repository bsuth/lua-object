local Object = require('Object')

describe('creation', () -> {
  spec('can construct', () -> {
    assert.has_no.errors(() -> {
      Object()
      Object({})
      Object({ _get_x = () -> 1 })
    })
  })

  spec('can init', () -> {
    local can_init = false
    local init_class_property = false

    local test_object = Object({
      class_property = 1,
      _init = () => {
        can_init = true
        init_class_property = self.class_property
        self.proxy_property = 2
      }
    })

    assert.are.equal(true, can_init)
    assert.are.equal(test_object._class.class_property, init_class_property)
    assert.are.equal(2, test_object._proxy.proxy_property)
  })
})

describe('getters', () -> {
  spec('has Object properties', () -> {
    local test_object = Object()
    assert.are.equal('function', type(test_object.rawget))
    assert.are.equal('function', type(test_object.get))
    assert.are.equal('function', type(test_object.rawset))
    assert.are.equal('function', type(test_object.set))
  })

  spec('has class properties', () -> {
    local test_object = Object({ class_property = 1 })
    assert.are.equal(1, test_object.class_property)
  })

  spec('prioritizes class over Object properties', () -> {
    local test_object = Object({ publish = 2 })
    assert.are.equal(2, test_object.publish)
  })

  spec('prioritizes instance over class properties', () -> {
    local test_object = Object({ instance_default = 3 })
    test_object.instance_default *= -1
    assert.are.equal(-3, test_object.instance_default)
  })

  spec('has custom getter', () -> {
    local test_object = Object({ _get_x = () -> 4 })
    assert.are.equal(4, test_object.x)
  })
})

describe('setters', () -> {
  spec('stores properties in proxy', () -> {
    local test_object = Object()
    test_object.x = 1
    assert.are.equal(1, test_object._proxy.x)
  })

  spec('does not override class properties', () -> {
    local test_object = Object({ class_property = 1 })
    test_object.class_property *= -1
    assert.are.equal(-1, test_object.class_property)
    assert.are.equal(1, test_object._class.class_property)
  })

  spec('has custom setter', () -> {
    local test_object = Object({ _set_y = new_y => self:rawset('y', new_y + 1) })
    test_object.y = 1
    assert.are.equal(2, test_object.y)
  })

  spec('can prevent rawset publish', () -> {
    local published_change_event = false
    local test_object = Object({ _on_change_x = () => { published_change_event = true }})
    test_object:rawset('x', 1, true)
    assert.are.equal(false, published_change_event)
  })
})

describe('pubsub', () -> {
  spec('has change events', () -> {
    local published_override_change_event = false
    local published_new_key_change_event = false
    local published_existing_key_change_event = false

    local test_object = Object({ class_key = 0 })

    test_object:subscribe('change_class_key', () -> {
      published_override_change_event = true
    })

    test_object:subscribe('change_x', () -> {
      if !published_new_key_change_event {
        published_new_key_change_event = true
      } else {
        published_existing_key_change_event = true
      }
    })

    test_object.class_key = 1
    test_object.x = 1
    test_object.x = 2

    assert.are.equal(true, published_override_change_event)
    assert.are.equal(true, published_new_key_change_event)
    assert.are.equal(true, published_existing_key_change_event)
  })

  spec('has custom events', () -> {
    local published_custom_event = false
    local test_object = Object()

    test_object:subscribe('myevent', () -> {
      published_custom_event = true
    })

    assert.are.equal(false, published_custom_event)
    test_object:publish('myevent')
    assert.are.equal(true, published_custom_event)
  })

  spec('can pass custom event args', () -> {
    local event_arg_1, event_arg_2 = 0, 0
    local test_object = Object()

    test_object:subscribe('myevent', (new_event_arg_1, new_event_arg_2) -> {
      event_arg_1, event_arg_2 = new_event_arg_1, new_event_arg_2
    })

    assert.are.equal(0, event_arg_1)
    assert.are.equal(0, event_arg_2)
    test_object:publish('myevent', 1, 2)
    assert.are.equal(1, event_arg_1)
    assert.are.equal(2, event_arg_2)
  })

  spec('has native handlers', () -> {
    local published_native_handler = false

    local test_object = Object({
      _on_myevent = () => { published_native_handler = true },
    })

    assert.are.equal(false, published_native_handler)
    test_object:publish('myevent', 1, 2)
    assert.are.equal(true, published_native_handler)
  })

  spec('can pass native handler args', () -> {
    local event_arg_1, event_arg_2 = 0, 0
    local test_object = Object()

    local test_object = Object({
      _on_myevent = (new_event_arg_1, new_event_arg_2) => {
        event_arg_1, event_arg_2 = new_event_arg_1, new_event_arg_2
      },
    })

    assert.are.equal(0, event_arg_1)
    assert.are.equal(0, event_arg_2)
    test_object:publish('myevent', 1, 2)
    assert.are.equal(1, event_arg_1)
    assert.are.equal(2, event_arg_2)
  })

  spec('can mutate subscriptions while publishing', () -> {
    local test_object = Object()

    local called_f1 = 0
    local called_f2 = 0
    local called_f3 = 0

    local f1 = () -> { called_f1 += 1 }
    function f2() { -- needs to be a function for self-reference
      called_f2 += 1
      test_object:unsubscribe('test', f2)
    }
    local f3 = () -> { called_f3 += 1 }

    test_object:subscribe('test', f1)
    test_object:subscribe('test', f2)
    test_object:subscribe('test', f3)

    test_object:publish('test')

    assert.are.equal(1, called_f1)
    assert.are.equal(1, called_f2)
    assert.are.equal(1, called_f3)

    test_object:publish('test')

    assert.are.equal(2, called_f1)
    assert.are.equal(1, called_f2)
    assert.are.equal(2, called_f3)
  })

  spec('can subscribe once', () -> {
    local test_object = Object()

    local counter = 0
    local increment = () -> { counter += 1 }

    test_object:once('test', increment)
    test_object:publish('test')
    assert.are.equal(1, counter)
    test_object:publish('test')
    assert.are.equal(1, counter)
  })
})
