local
Object
=
require(
'Object'
)
describe(
'creation'
,
function()
spec(
'can construct'
,
function()
assert
.has_no
.errors(
function()
Object(
)
Object(
{
}
)
Object(
{
_get_x
=
function()
return
1
end
,
}
)
end
)
end
)
spec(
'can init'
,
function()
local
canInit
=
false
local
initClassProperty
=
false
local
TestObject
=
Object(
{
classProperty
=
1
,
_init
=
function(self)
canInit
=
true
initClassProperty
=
self
.classProperty
self
.proxyProperty
=
2
end
,
}
)
assert
.are
.equal(
true
,
canInit
)
assert
.are
.equal(
TestObject
._class
.classProperty
,
initClassProperty
)
assert
.are
.equal(
2
,
TestObject
._proxy
.proxyProperty
)
end
)
end
)
describe(
'getters'
,
function()
spec(
'has Object properties'
,
function()
local
TestObject
=
Object(
)
assert
.are
.equal(
'function'
,
type(
TestObject
.rawget
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.get
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.rawset
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.set
)
)
end
)
spec(
'has class properties'
,
function()
local
TestObject
=
Object(
{
classProperty
=
1
,
}
)
assert
.are
.equal(
1
,
TestObject
.classProperty
)
end
)
spec(
'prioritizes class over Object properties'
,
function()
local
TestObject
=
Object(
{
publish
=
2
,
}
)
assert
.are
.equal(
2
,
TestObject
.publish
)
end
)
spec(
'prioritizes instance over class properties'
,
function()
local
TestObject
=
Object(
{
instanceDefault
=
3
,
}
)
TestObject
.instanceDefault
=
TestObject
.instanceDefault
*
-
1
assert
.are
.equal(
-
3
,
TestObject
.instanceDefault
)
end
)
spec(
'has custom getter'
,
function()
local
TestObject
=
Object(
{
_get_x
=
function()
return
4
end
,
}
)
assert
.are
.equal(
4
,
TestObject
.x
)
end
)
end
)
describe(
'setters'
,
function()
spec(
'stores properties in proxy'
,
function()
local
TestObject
=
Object(
)
TestObject
.x
=
1
assert
.are
.equal(
1
,
TestObject
._proxy
.x
)
end
)
spec(
'does not override class properties'
,
function()
local
TestObject
=
Object(
{
classProperty
=
1
,
}
)
TestObject
.classProperty
=
TestObject
.classProperty
*
-
1
assert
.are
.equal(
-
1
,
TestObject
.classProperty
)
assert
.are
.equal(
1
,
TestObject
._class
.classProperty
)
end
)
spec(
'has custom setter'
,
function()
local
TestObject
=
Object(
{
_set_y
=
function(self,newY)
return
self
:rawset(
'y'
,
newY
+
1
)
end
,
}
)
TestObject
.y
=
1
assert
.are
.equal(
2
,
TestObject
.y
)
end
)
spec(
'can prevent rawset publish'
,
function()
local
publishedChangeEvent
=
false
local
TestObject
=
Object(
{
_on_change_x
=
function(self)
publishedChangeEvent
=
true
end
,
}
)
TestObject
:rawset(
'x'
,
1
,
true
)
assert
.are
.equal(
false
,
publishedChangeEvent
)
end
)
end
)
describe(
'pubsub'
,
function()
spec(
'has change events'
,
function()
local
publishedOverrideChangeEvent
=
false
local
publishedNewKeyChangeEvent
=
false
local
publishedExistingKeyChangeEvent
=
false
local
TestObject
=
Object(
{
classKey
=
0
,
}
)
TestObject
:subscribe(
'change_classKey'
,
function()
publishedOverrideChangeEvent
=
true
end
)
TestObject
:subscribe(
'change_x'
,
function()
if
not
publishedNewKeyChangeEvent
then
publishedNewKeyChangeEvent
=
true
else
publishedExistingKeyChangeEvent
=
true
end
end
)
TestObject
.classKey
=
1
TestObject
.x
=
1
TestObject
.x
=
2
assert
.are
.equal(
true
,
publishedOverrideChangeEvent
)
assert
.are
.equal(
true
,
publishedNewKeyChangeEvent
)
assert
.are
.equal(
true
,
publishedExistingKeyChangeEvent
)
end
)
spec(
'has custom events'
,
function()
local
publishedCustomEvent
=
false
local
TestObject
=
Object(
)
TestObject
:subscribe(
'myevent'
,
function()
publishedCustomEvent
=
true
end
)
assert
.are
.equal(
false
,
publishedCustomEvent
)
TestObject
:publish(
'myevent'
)
assert
.are
.equal(
true
,
publishedCustomEvent
)
end
)
spec(
'can pass custom event args'
,
function()
local
eventArg1
,
eventArg2
=
0
,
0
local
TestObject
=
Object(
)
TestObject
:subscribe(
'myevent'
,
function(newEventArg1,newEventArg2)
eventArg1
,
eventArg2
=
newEventArg1
,
newEventArg2
end
)
assert
.are
.equal(
0
,
eventArg1
)
assert
.are
.equal(
0
,
eventArg2
)
TestObject
:publish(
'myevent'
,
1
,
2
)
assert
.are
.equal(
1
,
eventArg1
)
assert
.are
.equal(
2
,
eventArg2
)
end
)
spec(
'has native handlers'
,
function()
local
publishedNativeHandler
=
false
local
TestObject
=
Object(
{
_on_myevent
=
function(self)
publishedNativeHandler
=
true
end
,
}
)
assert
.are
.equal(
false
,
publishedNativeHandler
)
TestObject
:publish(
'myevent'
,
1
,
2
)
assert
.are
.equal(
true
,
publishedNativeHandler
)
end
)
spec(
'can pass native handler args'
,
function()
local
eventArg1
,
eventArg2
=
0
,
0
local
TestObject
=
Object(
)
local
TestObject
=
Object(
{
_on_myevent
=
function(self,newEventArg1,newEventArg2)
eventArg1
,
eventArg2
=
newEventArg1
,
newEventArg2
end
,
}
)
assert
.are
.equal(
0
,
eventArg1
)
assert
.are
.equal(
0
,
eventArg2
)
TestObject
:publish(
'myevent'
,
1
,
2
)
assert
.are
.equal(
1
,
eventArg1
)
assert
.are
.equal(
2
,
eventArg2
)
end
)
end
)
-- __ERDE_COMPILED__