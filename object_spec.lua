local
Object
=
require(
'object'
)
describe(
'creation'
,
function()
spec(
'can construct'
,
function()
assert
.has_no
.errors(
function()
Object(
)
Object(
{
}
)
Object(
{
_get_x
=
function()
return
1
end
,
}
)
end
)
end
)
spec(
'can init'
,
function()
local
canInit
=
false
local
initClassProperty
=
false
local
TestObject
=
Object(
{
classProperty
=
1
,
_init
=
function(self)
canInit
=
true
initClassProperty
=
self
.classProperty
self
.proxyProperty
=
2
end
,
}
)
assert
.are
.equal(
true
,
canInit
)
assert
.are
.equal(
TestObject
._class
.classProperty
,
initClassProperty
)
assert
.are
.equal(
2
,
TestObject
._proxy
.proxyProperty
)
end
)
spec(
'do not call getters / setters on init'
,
function()
local
calledGetter
=
false
local
calledSetter
=
false
local
TestObject
=
Object(
{
_get_x
=
function()
calledGetter
=
true
end
,
_set_x
=
function()
calledSetter
=
true
end
,
_init
=
function(self)
self
.x
=
1
return
self
.x
end
,
}
)
assert
.are
.equal(
false
,
calledGetter
)
assert
.are
.equal(
false
,
calledSetter
)
end
)
end
)
describe(
'getters'
,
function()
local
TestObject
=
Object(
{
classProperty
=
1
,
publish
=
2
,
instanceDefault
=
3
,
_get_x
=
function()
return
4
end
,
}
)
TestObject
.instanceDefault
=
TestObject
.instanceDefault
*
-
1
spec(
'has Object properties'
,
function()
assert
.are
.equal(
'function'
,
type(
TestObject
.rawget
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.get
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.rawset
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.set
)
)
end
)
spec(
'has class properties'
,
function()
assert
.are
.equal(
1
,
TestObject
.classProperty
)
end
)
spec(
'prioritizes class over Object properties'
,
function()
assert
.are
.equal(
2
,
TestObject
.publish
)
end
)
spec(
'prioritizes instance over class properties'
,
function()
assert
.are
.equal(
-
3
,
TestObject
.instanceDefault
)
end
)
spec(
'has custom getter'
,
function()
assert
.are
.equal(
4
,
TestObject
.x
)
end
)
end
)
describe(
'setters'
,
function()
local
TestObject
=
Object(
{
classProperty
=
1
,
_set_y
=
function(self,newY)
return
self
:rawset(
'y'
,
newY
+
1
)
end
,
}
)
spec(
'stores properties in proxy'
,
function()
TestObject
.x
=
1
assert
.are
.equal(
1
,
TestObject
._proxy
.x
)
end
)
spec(
'does not override class properties'
,
function()
TestObject
.classProperty
=
TestObject
.classProperty
*
-
1
assert
.are
.equal(
-
1
,
TestObject
.classProperty
)
assert
.are
.equal(
1
,
TestObject
._class
.classProperty
)
end
)
spec(
'has custom setter'
,
function()
TestObject
.y
=
1
assert
.are
.equal(
2
,
TestObject
.y
)
end
)
end
)
describe(
'pubsub'
,
function()
spec(
'has change events'
,
function()
local
emittedOverrideChangeEvent
=
false
local
emittedNewKeyChangeEvent
=
false
local
emittedExistingKeyChangeEvent
=
false
local
TestObject
=
Object(
{
classKey
=
0
,
}
)
TestObject
:subscribe(
'change_classKey'
,
function()
emittedOverrideChangeEvent
=
true
end
)
TestObject
:subscribe(
'change_x'
,
function()
if
not
emittedNewKeyChangeEvent
then
emittedNewKeyChangeEvent
=
true
else
emittedExistingKeyChangeEvent
=
true
end
end
)
TestObject
.classKey
=
1
TestObject
.x
=
1
TestObject
.x
=
2
assert
.are
.equal(
true
,
emittedOverrideChangeEvent
)
assert
.are
.equal(
true
,
emittedNewKeyChangeEvent
)
assert
.are
.equal(
true
,
emittedExistingKeyChangeEvent
)
end
)
spec(
'has custom events'
,
function()
local
emittedCustomEvent
=
false
local
TestObject
=
Object(
)
TestObject
:subscribe(
'myevent'
,
function()
emittedCustomEvent
=
true
end
)
assert
.are
.equal(
false
,
emittedCustomEvent
)
TestObject
:publish(
'myevent'
)
assert
.are
.equal(
true
,
emittedCustomEvent
)
end
)
spec(
'can pass custom event args'
,
function()
local
eventArg1
,
eventArg2
=
0
,
0
local
TestObject
=
Object(
)
TestObject
:subscribe(
'myevent'
,
function(newEventArg1,newEventArg2)
eventArg1
,
eventArg2
=
newEventArg1
,
newEventArg2
end
)
assert
.are
.equal(
0
,
eventArg1
)
assert
.are
.equal(
0
,
eventArg2
)
TestObject
:publish(
'myevent'
,
1
,
2
)
assert
.are
.equal(
1
,
eventArg1
)
assert
.are
.equal(
2
,
eventArg2
)
end
)
spec(
'has native handlers'
,
function()
local
emittedNativeHandler
=
false
local
TestObject
=
Object(
{
_on_myevent
=
function(self)
emittedNativeHandler
=
true
end
,
}
)
assert
.are
.equal(
false
,
emittedNativeHandler
)
TestObject
:publish(
'myevent'
,
1
,
2
)
assert
.are
.equal(
true
,
emittedNativeHandler
)
end
)
spec(
'can pass native handler args'
,
function()
local
eventArg1
,
eventArg2
=
0
,
0
local
TestObject
=
Object(
)
local
TestObject
=
Object(
{
_on_myevent
=
function(self,newEventArg1,newEventArg2)
eventArg1
,
eventArg2
=
newEventArg1
,
newEventArg2
end
,
}
)
assert
.are
.equal(
0
,
eventArg1
)
assert
.are
.equal(
0
,
eventArg2
)
TestObject
:publish(
'myevent'
,
1
,
2
)
assert
.are
.equal(
1
,
eventArg1
)
assert
.are
.equal(
2
,
eventArg2
)
end
)
end
)
-- __ERDE_COMPILED__