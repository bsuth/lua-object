local
Object
=
require(
'object'
)
describe(
'creation'
,
function()
spec(
'can construct'
,
function()
assert
.has_no
.errors(
function()
Object(
)
Object(
{
}
)
Object(
{
_get_x
=
function()
return
1
end
,
}
)
end
)
end
)
spec(
'can init'
,
function()
local
canInit
=
false
local
initClassProperty
=
false
local
TestObject
=
Object(
{
classProperty
=
1
,
_init
=
function(self)
canInit
=
true
initClassProperty
=
self
.classProperty
self
.proxyProperty
=
2
end
,
}
)
assert
.are
.equal(
true
,
canInit
)
assert
.are
.equal(
TestObject
._class
.classProperty
,
initClassProperty
)
assert
.are
.equal(
2
,
TestObject
._proxy
.proxyProperty
)
end
)
spec(
'do not call setters on init'
,
function()
local
canInit
=
false
local
initClassProperty
=
false
local
TestObject
=
Object(
{
classProperty
=
1
,
_init
=
function(self)
canInit
=
true
initClassProperty
=
self
.classProperty
self
.proxyProperty
=
2
end
,
}
)
assert
.are
.equal(
true
,
canInit
)
assert
.are
.equal(
TestObject
._class
.classProperty
,
initClassProperty
)
assert
.are
.equal(
2
,
TestObject
._proxy
.proxyProperty
)
end
)
end
)
describe(
'getters'
,
function()
local
TestObject
=
Object(
{
classProperty
=
1
,
publish
=
2
,
instanceDefault
=
3
,
_get_x
=
function()
return
4
end
,
}
)
TestObject
.instanceDefault
=
TestObject
.instanceDefault
*
-
1
spec(
'has Object properties'
,
function()
assert
.are
.equal(
'function'
,
type(
TestObject
.rawget
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.get
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.rawset
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.set
)
)
end
)
spec(
'has class properties'
,
function()
assert
.are
.equal(
1
,
TestObject
.classProperty
)
end
)
spec(
'prioritizes class over Object properties'
,
function()
assert
.are
.equal(
2
,
TestObject
.publish
)
end
)
spec(
'prioritizes instance over class properties'
,
function()
assert
.are
.equal(
-
3
,
TestObject
.instanceDefault
)
end
)
spec(
'has custom getter'
,
function()
assert
.are
.equal(
4
,
TestObject
.x
)
end
)
end
)
describe(
'setters'
,
function()
local
TestObject
=
Object(
{
classProperty
=
1
,
_set_y
=
function(self,newY)
return
self
:rawset(
'y'
,
newY
+
1
)
end
,
}
)
spec(
'stores properties in proxy'
,
function()
TestObject
.x
=
1
assert
.are
.equal(
1
,
TestObject
._proxy
.x
)
end
)
spec(
'does not override class properties'
,
function()
TestObject
.classProperty
=
TestObject
.classProperty
*
-
1
assert
.are
.equal(
-
1
,
TestObject
.classProperty
)
assert
.are
.equal(
1
,
TestObject
._class
.classProperty
)
end
)
spec(
'has custom setter'
,
function()
TestObject
.y
=
1
assert
.are
.equal(
2
,
TestObject
.y
)
end
)
end
)
describe(
'pubsub'
,
function()
local
TestObject
=
Object(
{
}
)
spec(
'setter triggers change event'
,
function()
local
changed
=
false
TestObject
:subscribe(
'change_x'
,
function()
changed
=
true
end
)
TestObject
.x
=
1
assert
.are
.equal(
true
,
changed
)
end
)
end
)
-- __ERDE_COMPILED__