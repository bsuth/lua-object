local
Object
=
require(
'object'
)
describe(
'getters'
,
function()
local
TestObject
=
Object(
{
class_property
=
1
,
publish
=
2
,
instance_default
=
3
,
_get_x
=
function()
return
4
end
,
}
)
TestObject
.instance_default
=
TestObject
.instance_default
*
-
1
spec(
'has Object properties'
,
function()
assert
.are
.equal(
'function'
,
type(
TestObject
.rawget
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.get
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.rawset
)
)
assert
.are
.equal(
'function'
,
type(
TestObject
.set
)
)
end
)
spec(
'has class properties'
,
function()
assert
.are
.equal(
1
,
TestObject
.class_property
)
end
)
spec(
'prioritizes class over Object properties'
,
function()
assert
.are
.equal(
2
,
TestObject
.publish
)
end
)
spec(
'prioritizes instance over class properties'
,
function()
assert
.are
.equal(
-
3
,
TestObject
.instance_default
)
end
)
spec(
'has custom getter'
,
function()
assert
.are
.equal(
4
,
TestObject
.x
)
end
)
end
)
describe(
'setters'
,
function()
local
TestObject
=
Object(
{
class_property
=
1
,
_set_y
=
function(self,newY)
return
self
:rawset(
'y'
,
newY
+
1
)
end
,
}
)
spec(
'stores properties in proxy'
,
function()
TestObject
.x
=
1
assert
.are
.equal(
1
,
TestObject
._proxy
.x
)
end
)
spec(
'does not override class properties'
,
function()
TestObject
.class_property
=
TestObject
.class_property
*
-
1
assert
.are
.equal(
-
1
,
TestObject
.class_property
)
assert
.are
.equal(
1
,
TestObject
._class
.class_property
)
end
)
spec(
'has custom setter'
,
function()
TestObject
.y
=
1
assert
.are
.equal(
2
,
TestObject
.y
)
end
)
end
)
describe(
'pubsub'
,
function()
local
TestObject
=
Object(
{
class_property
=
1
,
publish
=
2
,
instance_default
=
3
,
_get_x
=
function()
return
4
end
,
}
)
end
)
-- __ERDE_COMPILED__